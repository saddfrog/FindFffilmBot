from functions_for_bot import *

@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.from_user.id, 
                     "–ü—Ä–∏–≤–µ—Ç)\n–ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Ñ–∏–ª—å–º–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", reply_markup=main_b())
@bot.message_handler(commands=['help'])
def start_message(message):
    bot.send_message(message.from_user.id, "–ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")

@bot.message_handler(content_types=['sticker'])
def start_message(message):
        bot.send_message(message.from_user.id, "–ó–∞–±–∞–≤–Ω—ã–π —Å—Ç–∏–∫–µ—Ä üòÅ")
@bot.message_handler()
def start_message(message):
        bot.send_message(message.from_user.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —É–º–µ—é —á–∏—Ç–∞—Ç—å, –Ω–æ —è —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ç–∞–º —á—Ç–æ-—Ç–æ —Ö–æ—Ä–æ—à–µ–µüòú")


@bot.callback_query_handler(func=lambda call: True)    
def call_back(call):
    del_prev_buttons(call)
    
    if call.data == 'main':
        # del_prev_buttons(call)
        bot.send_message(chat_id=call.message.chat.id, text="—Ç–µ—Å—Ç–∏–º –∫–Ω–æ–ø–∫–∏\n"
       "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º", reply_markup=main_b())      

    if call.data in callback_map:
        real_value = callback_map[call.data]
        bot.send_message(call.message.chat.id, f"–¢—ã –≤—ã–±—Ä–∞–ª: {real_value}")

    if call.data == 'random_film':   
        film = random_film() 
        # del_prev_buttons(call)
        bot.send_photo(chat_id=call.message.chat.id,photo=film[6] ,caption=f"üé¨*–í–∞—à —Ñ–∏–ª—å–º*: `{film[1]}`\n\n*–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞*: {film[7]}\n\n *–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥*: {film[15]}",parse_mode="MARKDOWN", reply_markup=random_film_b())
   
    if call.data == 'user_choose':
        user_filters[call.message.chat.id] = {}  # —Å–±—Ä–æ—Å
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=filter_menu_b())

    if call.data == 'reset_filters':
        user_filters[call.message.chat.id] = {}  # –æ—á–∏—â–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
        print(user_filters[call.message.chat.id])

        bot.send_message(text="üßπ –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã.",chat_id=call.message.chat.id, reply_markup=filter_menu_b())

    if call.data == 'choose_year':
        markup = types.InlineKeyboardMarkup()
        decades = {
            '1980': '1980‚Äì1989',
            '1990': '1990‚Äì1999',
            '2000': '2000‚Äì2009',
            '2010': '2010‚Äì2019',
            '2020': '2020‚Äì2029'
        }
        for key, label in decades.items():
            markup.add(types.InlineKeyboardButton(label, callback_data=f'set_year_{key}'))
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Å—è—Ç–∏–ª–µ—Ç–∏–µ –≤—ã–ø—É—Å–∫–∞:", reply_markup=markup)

    if call.data == 'choose_genre':
        markup = types.InlineKeyboardMarkup()
        for i in range(0, len(genre), 3):
            buttons = []
            for j in range(3):
                if i + j < len(genre):
                    buttons.append(types.InlineKeyboardButton(genre[i + j], callback_data=f'set_genre_{genre[i + j]}'))            
            markup.add(*buttons)
        markup.add(types.InlineKeyboardButton("–Ω–∏—á–µ–≥–æ", callback_data=f'set_genre_none'))

        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=markup)

    if call.data == 'choose_country':
        markup = types.InlineKeyboardMarkup()
        for i in range(0, len(countries), 3):
            buttons = []
            for j in range(3):
                if i + j < len(countries):
                    buttons.append(types.InlineKeyboardButton(countries[i + j], callback_data=f'set_country_{countries[i + j]}'))            
            markup.add(*buttons)
        markup.add(types.InlineKeyboardButton("–Ω–∏—á–µ–≥–æ", callback_data=f'set_country_none'))

        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=markup)

    if call.data == 'choose_age':
        markup = types.InlineKeyboardMarkup()
        for age in ages:
            markup.add(types.InlineKeyboardButton(age, callback_data=f'set_age_{age}'))
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥:", reply_markup=markup)

    if call.data == 'choose_actor':
        markup = types.InlineKeyboardMarkup()
        for i in range(0, len(actors), 3):
            buttons = []
            for j in range(3):
                if i + j < len(actors):
                    buttons.append(types.InlineKeyboardButton(actors[i + j], callback_data=f'set_actor_{actors[i + j]}'))            
            markup.add(*buttons)
        markup.add(types.InlineKeyboardButton("–Ω–∏—á–µ–≥–æ", callback_data=f'set_actor_none'))

        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç—ë—Ä–∞:", reply_markup=markup)
        
    if call.data.startswith('set_year_'):
        year = call.data.split('_')[-1]
        user_filters.setdefault(call.message.chat.id, {})['year'] = year
        summary = format_filter_summary(user_filters[call.message.chat.id])
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.send_message(call.message.chat.id, f"‚úÖ –ì–æ–¥ –≤—ã–±—Ä–∞–Ω.\n\n{summary}", parse_mode='Markdown', reply_markup=filter_menu_b())

    if call.data.startswith('set_genre_'):
        g = call.data.split('_', 2)[2]
        if g == 'none':
            user_filters[call.message.chat.id].pop('genre', None)
            g = '–Ω–µ'
        else:
            user_filters.setdefault(call.message.chat.id, {})['genre'] = g
        summary = format_filter_summary(user_filters[call.message.chat.id])
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.send_message(call.message.chat.id, f"‚úÖ –ñ–∞–Ω—Ä: {g} –≤—ã–±—Ä–∞–Ω.\n\n{summary}", parse_mode='Markdown', reply_markup=filter_menu_b())

    if call.data.startswith('set_country_'):
        c = call.data.split('_', 2)[2]
        if c == 'none':
            user_filters[call.message.chat.id].pop('country', None)
            c = '–Ω–µ'
        else:
            user_filters.setdefault(call.message.chat.id, {})['country'] = c
        summary = format_filter_summary(user_filters[call.message.chat.id]) 
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id) 

        bot.send_message(call.message.chat.id, f"‚úÖ –°—Ç—Ä–∞–Ω–∞: {c} –≤—ã–±—Ä–∞–Ω–∞.\n\n{summary}",parse_mode='Markdown', reply_markup=filter_menu_b())
        print(user_filters[call.message.chat.id])

    if call.data.startswith('set_age_'):
        a = call.data.split('_')[-1]
        user_filters.setdefault(call.message.chat.id, {})['age'] = a
        summary = format_filter_summary(user_filters[call.message.chat.id])
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.send_message(call.message.chat.id, f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥: {a} –≤—ã–±—Ä–∞–Ω.\n\n{summary}",parse_mode='Markdown', reply_markup=filter_menu_b())

    if call.data.startswith('set_actor_'):
        a = call.data.split('_', 2)[2]
        if a == 'none':
            user_filters[call.message.chat.id].pop('actor', None)
            a = '–Ω–µ'
        else:
            user_filters.setdefault(call.message.chat.id, {})['actor'] = a
        summary = format_filter_summary(user_filters[call.message.chat.id])
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.send_message(call.message.chat.id, f"‚úÖ –ê–∫—Ç—ë—Ä: {a} –≤—ã–±—Ä–∞–Ω.\n\n{summary}",parse_mode='Markdown', reply_markup=filter_menu_b())

    if call.data == 'show_filtered':
        filters = user_filters.get(call.message.chat.id, {})
        results = []

        with open('src/kinopoisk_top250_full.csv', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                if 'year' in filters:
                    start = int(filters['year'])
                    end = start + 9
                    if not (start <= int(row['year']) <= end):
                        continue

                if 'genre' in filters and filters['genre'] not in row['genres']:
                    continue
                if 'country' in filters and filters['country'] not in row['countries']:
                    continue
                if 'age' in filters and filters['age'] not in row['age_rating']:
                    continue
                if 'actor' in filters and filters['actor'] not in row['actors']:
                    continue
                results.append(row)
        if not results:
            bot.send_message(call.message.chat.id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º üò¢", reply_markup=filter_menu_b())
        else:
            filtred_films(call.message.chat.id, results)

bot.polling(none_stop=True, interval=0)