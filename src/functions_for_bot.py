import telebot
from telebot import types
import csv
import random
import hashlib

token = '8065253218:AAHjv0WTW5qv2xp9tsT9EhXGXwqrnomXXpM'
bot = telebot.TeleBot(token)
callback_map = {}
user_filters = {}  # chat_id: { 'year': '1990', 'genre': '–∫–æ–º–µ–¥–∏—è', ... }

years = ['1980', '1990', '2000', '2010', '2020']
ages = ['0+', '6+', '12+', '16+', '18+']

genre = ['–∞–Ω–∏–º–µ', '–±–∏–æ–≥—Ä–∞—Ñ–∏—è', '–±–æ–µ–≤–∏–∫', '–≤–µ—Å—Ç–µ—Ä–Ω', '–≤–æ–µ–Ω–Ω—ã–π', '–¥–µ—Ç–µ–∫—Ç–∏–≤', '–¥—Ä–∞–º–∞', '–∏—Å—Ç–æ—Ä–∏—è', '–∫–æ–º–µ–¥–∏—è', 
         '–∫—Ä–∏–º–∏–Ω–∞–ª', '–º–µ–ª–æ–¥—Ä–∞–º–∞', '–º—É–∑—ã–∫–∞', '–º—É–ª—å—Ç—Ñ–∏–ª—å–º', '–º—é–∑–∏–∫–ª', '–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è', '—Å–µ–º–µ–π–Ω—ã–π', '—Å–ø–æ—Ä—Ç', 
         '—Ç—Ä–∏–ª–ª–µ—Ä', '—É–∂–∞—Å—ã', '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', '—Ñ—ç–Ω—Ç–µ–∑–∏'
         ]

countries = ['–ê–≤—Å—Ç—Ä–∞–ª–∏—è', '–ê–≤—Å—Ç—Ä–∏—è', '–ë–µ–ª–∞—Ä—É—Å—å', '–ë–µ–ª—å–≥–∏—è', '–ë–æ–ª–≥–∞—Ä–∏—è', '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', 
             '–í–µ–Ω–≥—Ä–∏—è', '–ì–∞–º–±–∏—è', '–ì–µ—Ä–º–∞–Ω–∏—è', '–ì–æ–Ω–∫–æ–Ω–≥', '–î–∞–Ω–∏—è', '–ò–Ω–¥–∏—è', '–ò–æ—Ä–¥–∞–Ω–∏—è', '–ò—Å–ø–∞–Ω–∏—è', '–ò—Ç–∞–ª–∏—è', 
             '–ö–∞–Ω–∞–¥–∞', '–ö–∏—Ç–∞–π', '–ö–æ—Ä–µ—è –Æ–∂–Ω–∞—è', '–õ–∞—Ç–≤–∏—è', '–ú–∞–ª—å—Ç–∞', '–ú–∞—Ä–æ–∫–∫–æ', '–ú–µ–∫—Å–∏–∫–∞', '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã', 
             '–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è', '–ù–æ—Ä–≤–µ–≥–∏—è', '–û–ê–≠', '–ü–æ–ª—å—à–∞', '–†–æ—Å—Å–∏—è', '–°–°–°–†', '–°–®–ê', '–°–µ—Ä–±–∏—è', '–¢–∞–∏–ª–∞–Ω–¥', 
             '–§–∏–Ω–ª—è–Ω–¥–∏—è', '–§—Ä–∞–Ω—Ü–∏—è', '–ß–µ—Ö–∏—è', '–®–≤–µ–π—Ü–∞—Ä–∏—è', '–®–≤–µ—Ü–∏—è', '–Ø–ø–æ–Ω–∏—è'
             ]

actors = [
    '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ê–±–¥—É–ª–æ–≤', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –î–µ–º–∏–¥–æ–≤', '–ê–ª–µ–∫—Å–µ–π –ë–∞—Ä–¥—É–∫–æ–≤', '–ê–ª–µ–∫—Å–µ–π –ë—É–ª–¥–∞–∫–æ–≤', '–ê–ª–µ–∫—Å–µ–π –ö—Ä–∞–≤—á–µ–Ω–∫–æ',
    '–ê–ª–∏—Å–∞ –§—Ä–µ–π–Ω–¥–ª–∏—Ö', '–ê–Ω–∞—Ç–æ–ª–∏–π –ü–∞–ø–∞–Ω–æ–≤', '–ê–Ω–¥—Ä–µ–π –ú–∏—Ä–æ–Ω–æ–≤', '–ê–Ω–¥—Ä–µ–π –ú—è–≥–∫–æ–≤', '–ê–Ω–Ω–∞ –°–∏–Ω—è–∫–∏–Ω–∞',
    '–ê–Ω–Ω–∞ –§—Ä–∏–ª', '–ê—Ä—Ç—ë–º –ú–µ—Ä–∫—É–ª–æ–≤', '–ë–µ–Ω –ê—Ñ—Ñ–ª–µ–∫', '–ë–µ–Ω–µ–¥–∏–∫—Ç –ö–∞–º–±–µ—Ä–±—ç—Ç—á', '–ë—Ä–∞–π–∞–Ω –ö–æ–∫—Å',
    '–ë—Ä—ç–¥ –ü–∏—Ç—Ç', '–ë—Ä—ç–¥–ª–∏ –ö—É–ø–µ—Ä', '–ë—Ä—é—Å –£–∏–ª–ª–∏—Å', '–í–∞–ª–µ–Ω—Ç–∏–Ω –ì–∞—Ñ—Ç', '–í–∞—Å–∏–ª–∏–π –õ–∏–≤–∞–Ω–æ–≤',
    '–í–∏–∫—Ç–æ—Ä –°—É—Ö–æ—Ä—É–∫–æ–≤', '–í–ª–∞–¥–∏–º–∏—Ä –ú–∞—à–∫–æ–≤', '–í–ª–∞–¥–∏–º–∏—Ä –ú–µ–Ω—å—à–æ–≤', '–ì–∞—Ä—Ä–∏ –û–ª–¥–º–∞–Ω', '–ì–æ—à–∞ –ö—É—Ü–µ–Ω–∫–æ',
    '–î–∞–Ω–∏—ç–ª—å –ë—Ä—é–ª—å', '–î–∂–∞—Ä–µ–¥ –õ–µ—Ç–æ', '–î–∂–µ–π–∫ –î–∂–∏–ª–ª–µ–Ω—Ö–æ–ª', '–î–∂–µ–π–º–∏ –õ–∏ –ö—ë—Ä—Ç–∏—Å', '–î–∂–µ–π–º—Å –ú–∞–∫—ç–≤–æ–π',
    '–î–∂–æ–Ω –¢—Ä–∞–≤–æ–ª—Ç–∞', '–î–∂–æ–Ω–Ω–∏ –î–µ–ø–ø', '–î–∂–æ—à –ë—Ä–æ–ª–∏–Ω', '–î–∂–æ–∑–µ—Ñ –ì–æ—Ä–¥–æ–Ω-–õ–µ–≤–∏—Ç—Ç', '–î–∂—É–ª–∏—è –†–æ–±–µ—Ä—Ç—Å',
    '–î–∂—É–ª–∏—è –£–æ–ª—Ç–µ—Ä—Å', '–î–∂–æ–Ω–Ω–∏ –§–ª–∏–Ω–Ω', '–ï–≤–≥–µ–Ω–∏–π –ú–∏—Ä–æ–Ω–æ–≤', '–ï–≤–≥–µ–Ω–∏—è –ì–ª–æ—Ç–æ–≤–∞', '–ï–≤–≥–µ–Ω–∏—è –°–∏–º–æ–Ω–æ–≤–∞',
    '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –í–∞—Å–∏–ª—å–µ–≤–∞', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ú–∞—Ä–∫–æ–≤–∞', '–ï–ª–µ–Ω–∞ –ü—Ä–æ–∫–ª–æ–≤–∞', '–ñ–∞–Ω –†–µ–Ω–æ', '–ö–µ–π—Ç –ë–ª–∞–Ω—à–µ—Ç—Ç',
    '–ö–µ–≤–∏–Ω –°–ø–µ–π—Å–∏', '–ö—Ä–∏—Å –•–µ–º—Å–≤–æ—Ä—Ç', '–ö—Ä–∏—Å –≠–≤–∞–Ω—Å', '–ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä –õ–ª–æ–π–¥', '–ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä –ü–ª–∞–º–º–µ—Ä'
        ]


def format_filter_summary(filters):
    year = f"{filters['year']}‚Äì{int(filters['year'])+9}" if 'year' in filters else "–≤—Å—ë"
    genre = filters.get('genre', "–≤—Å—ë")
    country = filters.get('country', "–≤—Å—ë")
    age = filters.get('age', "–≤—Å—ë")
    actor = filters.get('actor', "–≤—Å—ë")
    return (f"üéØ *–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:*\n"
            f"–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {year}\n"
            f"–ñ–∞–Ω—Ä: {genre}\n"
            f"–°—Ç—Ä–∞–Ω–∞: {country}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥: {age}\n"
            f"–ê–∫—Ç—ë—Ä: {actor}")


buttons_per_page = 15  # 5 —Å—Ç—Ä–æ–∫–∏ –ø–æ 3 –∫–Ω–æ–ø–æ–∫

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
def filter_menu_b():
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞", callback_data="choose_year"),
        types.InlineKeyboardButton("–ñ–∞–Ω—Ä", callback_data="choose_genre"),
        types.InlineKeyboardButton("–°—Ç—Ä–∞–Ω–∞", callback_data="choose_country"),
    )
    markup.add(
        types.InlineKeyboardButton("–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥", callback_data="choose_age"),
        types.InlineKeyboardButton("–ê–∫—Ç—ë—Ä", callback_data="choose_actor"),
    )
    markup.add(
        types.InlineKeyboardButton("üé¨ –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å–º—ã", callback_data="show_filtered"),
        types.InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data='reset_filters'),
    )
    markup.add(
        types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main")
    )
    return markup


# –§—É–Ω–∫—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (—Å —É—á–µ—Ç–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î)
def filter_by_year(year):
    films = []
    with open('src/kinopoisk_top250_full.csv', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            if year in row['year']:
                films.append(row)
    return films

def filter_by_country(country):
    films = []
    with open('src/kinopoisk_top250_full.csv', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            if country in row['countries']:
                films.append(row)
    return films

def filter_by_age(age_limit):
    films = []
    with open('src/kinopoisk_top250_full.csv', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            if age_limit in row['age_rating']:
                films.append(row)
    return films

def filter_by_actor(actor):
    films = []
    with open('src/kinopoisk_top250_full.csv', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            if actor in row['actors']:
                films.append(row)
    return films

def filter_by_genre(genre):
    films = []
    with open('src/kinopoisk_top250_full.csv', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            if genre in row['genres']:
                films.append(row)
    return films

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
def send_filtered_films(chat_id, films):
    if films:
        for film in films:
            bot.send_photo(chat_id, photo=film['poster_url'], caption=f"üé¨*–í–∞—à —Ñ–∏–ª—å–º*: `{film['title_ru']}`\n\n*–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞*: {film['description']}\n\n *–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥*: {film['age_rating']}", parse_mode="MARKDOWN", reply_markup=random_film_b())
    else:
        bot.send_message(chat_id=chat_id, text="–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∏–ª—å—Ç—Ä.")
    
def filtred_films(chat_id, results):
    film = random.choice(results)
    bot.send_photo(chat_id, photo=film['poster_url'], 
                   caption=f"üé¨*–í–∞—à —Ñ–∏–ª—å–º*: `{film['title_ru']}`\n\n*–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞*: {film['description']}\n\n *–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥*: {film['age_rating']}", 
                   parse_mode="MARKDOWN", reply_markup=filter_menu_b())


def short_callback(value: str) -> str:
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á (12 —Å–∏–º–≤–æ–ª–æ–≤)
    return hashlib.md5(value.encode()).hexdigest()[:12]

def random_film():
    film = ""
    with open('src/kinopoisk_top250_full.csv', encoding='utf-8') as f:
        reader = csv.reader(f)
        film_ind = random.randint(1, 250)
        for ind_reader, row in enumerate(reader):
            if ind_reader == film_ind:
                # print(row[0])
                film = row
                break
    f.close()
    return film

def del_prev_buttons(call):
    bot.edit_message_reply_markup(call.message.chat.id, message_id = call.message.message_id, reply_markup = '')

def main_b():
    buttons = types.InlineKeyboardMarkup()   
    buttons.add(types.InlineKeyboardButton(text='–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º', callback_data='random_film'), 
                types.InlineKeyboardButton(text='TESTING: –í—ã–±–æ—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data='user_choose'))
                # types.InlineKeyboardButton(text='–ü–æ–¥–±–æ—Ä–∫–∏', callback_data='selection_menu'))
    return buttons

def random_film_b():
    buttons = types.InlineKeyboardMarkup()   
    buttons.add( types.InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∏–ª—å–º', callback_data='random_film'), 
                types.InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main'))
    return buttons  
def user_choose_b():
    buttons = types.InlineKeyboardMarkup()   
    buttons.add(types.InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main'))
    return buttons    